#!/usr/bin/python

res={'v1':'        ','v2':'        ','v3':'        ','v4':'        ','v5':'        ','v6':'        ','v7':'        ','v8':'        '}
Nb = 4

ebox = [
        [0x01,0x03,0x05,0x0f,0x11,0x33,0x55,0xff,0x1a,0x2e,0x72,0x96,0xa1,0xf8,0x13,0x35],
        [0x5f,0xe1,0x38,0x48,0xd8,0x73,0x95,0xa4,0xf7,0x02,0x06,0x0a,0x1e,0x22,0x66,0xaa],
        [0xe5,0x34,0x5c,0xe4,0x37,0x59,0xeb,0x26,0x6a,0xbe,0xd9,0x70,0x90,0xab,0xe6,0x31],
        [0x53,0xf5,0x04,0x0c,0x14,0x3c,0x44,0xcc,0x4f,0xd1,0x68,0xb8,0xd3,0x6e,0xb2,0xcd],
        [0x4c,0xd4,0x67,0xa9,0xe0,0x3b,0x4d,0xd7,0x62,0xa6,0xf1,0x08,0x18,0x28,0x78,0x88],
        [0x83,0x9e,0xb9,0xd0,0x6b,0xbd,0xdc,0x7f,0x81,0x98,0xb3,0xce,0x49,0xdb,0x76,0x9a],
        [0xb5,0xc4,0x57,0xf9,0x10,0x30,0x50,0xf0,0x0b,0x1d,0x27,0x69,0xbb,0xd6,0x61,0xa3],
        [0xfe,0x19,0x2b,0x7d,0x87,0x92,0xad,0xec,0x2f,0x71,0x93,0xae,0xe9,0x20,0x60,0xa0],
        [0xfb,0x16,0x3a,0x4e,0xd2,0x6d,0xb7,0xc2,0x5d,0xe7,0x32,0x56,0xfa,0x15,0x3f,0x41],
        [0xc3,0x5e,0xe2,0x3d,0x47,0xc9,0x40,0xc0,0x5b,0xed,0x2c,0x74,0x9c,0xbf,0xda,0x75],
        [0x9f,0xba,0xd5,0x64,0xac,0xef,0x2a,0x7e,0x82,0x9d,0xbc,0xdf,0x7a,0x8e,0x89,0x80],
        [0x9b,0xb6,0xc1,0x58,0xe8,0x23,0x65,0xaf,0xea,0x25,0x6f,0xb1,0xc8,0x43,0xc5,0x54],
        [0xfc,0x1f,0x21,0x63,0xa5,0xf4,0x07,0x09,0x1b,0x2d,0x77,0x99,0xb0,0xcb,0x46,0xca],
        [0x45,0xcf,0x4a,0xde,0x79,0x8b,0x86,0x91,0xa8,0xe3,0x3e,0x42,0xc6,0x51,0xf3,0x0e],
        [0x12,0x36,0x5a,0xee,0x29,0x7b,0x8d,0x8c,0x8f,0x8a,0x85,0x94,0xa7,0xf2,0x0d,0x17],
        [0x39,0x4b,0xdd,0x7c,0x84,0x97,0xa2,0xfd,0x1c,0x24,0x6c,0xb4,0xc7,0x52,0xf6,0x01],
    ]

lbox= [
        [0x00,0x00,0x19,0x01,0x32,0x02,0x1a,0xc6,0x4b,0xc7,0x1b,0x68,0x33,0xee,0xdf,0x03],
        [0x64,0x04,0xe0,0x0e,0x34,0x8d,0x81,0xef,0x4c,0x71,0x08,0xc8,0xf8,0x69,0x1c,0xc1],
        [0x7d,0xc2,0x1d,0xb5,0xf9,0xb9,0x27,0x6a,0x4d,0xe4,0xa6,0x72,0x9a,0xc9,0x09,0x78],
        [0x65,0x2f,0x8a,0x05,0x21,0x0f,0xe1,0x24,0x12,0xf0,0x82,0x45,0x35,0x93,0xda,0x8e],
        [0x96,0x8f,0xdb,0xbd,0x36,0xd0,0xce,0x94,0x13,0x5c,0xd2,0xf1,0x40,0x46,0x83,0x38],
        [0x66,0xdd,0xfd,0x30,0xbf,0x06,0x8b,0x62,0xb3,0x25,0xe2,0x98,0x22,0x88,0x91,0x10],
        [0x7e,0x6e,0x48,0xc3,0xa3,0xb6,0x1e,0x42,0x3a,0x6b,0x28,0x54,0xfa,0x85,0x3d,0xba],
        [0x2b,0x79,0x0a,0x15,0x9b,0x9f,0x5e,0xca,0x4e,0xd4,0xac,0xe5,0xf3,0x73,0xa7,0x57],
        [0xaf,0x58,0xa8,0x50,0xf4,0xea,0xd6,0x74,0x4f,0xae,0xe9,0xd5,0xe7,0xe6,0xad,0xe8],
        [0x2c,0xd7,0x75,0x7a,0xeb,0x16,0x0b,0xf5,0x59,0xcb,0x5f,0xb0,0x9c,0xa9,0x51,0xa0],
        [0x7f,0x0c,0xf6,0x6f,0x17,0xc4,0x49,0xec,0xd8,0x43,0x1f,0x2d,0xa4,0x76,0x7b,0xb7],
        [0xcc,0xbb,0x3e,0x5a,0xfb,0x60,0xb1,0x86,0x3b,0x52,0xa1,0x6c,0xaa,0x55,0x29,0x9d],
        [0x97,0xb2,0x87,0x90,0x61,0xbe,0xdc,0xfc,0xbc,0x95,0xcf,0xcd,0x37,0x3f,0x5b,0xd1],
        [0x53,0x39,0x84,0x3c,0x41,0xa2,0x6d,0x47,0x14,0x2a,0x9e,0x5d,0x56,0xf2,0xd3,0xab],
        [0x44,0x11,0x92,0xd9,0x23,0x20,0x2e,0x89,0xb4,0x7c,0xb8,0x26,0x77,0x99,0xe3,0xa5],
        [0x67,0x4a,0xed,0xde,0xc5,0x31,0xfe,0x18,0x0d,0x63,0x8c,0x80,0xc0,0xf7,0x70,0x07]
    ]
sbox=[
        [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
        [0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
        [0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
        [0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
        [0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
        [0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
        [0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
        [0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
        [0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
        [0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
        [0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
        [0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
        [0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
        [0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
        [0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
        [0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]
    ]

sboxInv=[
        [0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb],
        [0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb],
        [0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e],
        [0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25],
        [0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92],
        [0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84],
        [0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06],
        [0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b],
        [0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73],
        [0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e],
        [0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b],
        [0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4],
        [0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f],
        [0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef],
        [0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61],
        [0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d]
    ]

rcon = [0,0x01000000,0x02000000,0x04000000,0x08000000,0x10000000,0x20000000,0x40000000,0x80000000,0x1b000000,0x36000000]

mix = [
            [0x02,0x03,0x01,0x01],
            [0x01,0x02,0x03,0x01],
            [0x01,0x01,0x02,0x03],
            [0x03,0x01,0x01,0x02]
          ]

def main():
    Nk = 0
    Nr = 0
    key = [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c]
    inp = [0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34]
    keylenght = 128
    Nk,Nr = KeyBlockRound(keylenght)
    wc = Nb*(Nr+1)
    w = KeyExpansion(key,wc,Nk,Nr)
    out = Cipher(inp, w, Nr)

def Cipher(inp, w, Nr):
    state = [[0 for x in range(4)] for x in range(Nb)]
    round_key = round_k(w[0:4])
    print '\n'
    print '#'.center(50,'#')
    print '   Cifrado  '.center(50,'#')
    print '#'.center(50,'#')
    print '\n'
    for r in range(4):
        for c in range(Nb):
            state[r][c]=inp[r+(4*c)]
    ############## Ronda 0 ###############
    print 'round[00].input\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(state[j][i])[2:].zfill(2), 
    print '\nround[00].k_sch\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(round_key[j][i])[2:].zfill(2),
    state = AddRoundKey(state, round_key)
    ######## Rondas intermedias ##########
    for r in range(1,Nr):
        round_key = round_k(w[r*4:r*4+4])
        print '\nround[%s].start\t'%(str(r).zfill(2)),
        for i in range(4):
            for j in range(4):
                print '%s'%hex(state[j][i])[2:].zfill(2), 
        state = SubBytes(state)
        print '\nround[%s].s_box\t'%(str(r).zfill(2)),
        for i in range(4):
            for j in range(4):
                print '%s'%hex(state[j][i])[2:].zfill(2),
        state = ShiftRows(state)
        print '\nround[%s].s_row\t'%(str(r).zfill(2)),
        for i in range(4):
            for j in range(4):
                print '%s'%hex(state[j][i])[2:].zfill(2),
        #return
        state = MixColumns(state)
        print '\nround[%s].m_col\t'%(str(r).zfill(2)),
        for i in range(4):
            for j in range(4):
                print '%s'%hex(state[j][i])[2:].zfill(2),
        state = AddRoundKey(state,round_key)
        print '\nround[%s].k_sch\t'%(str(r).zfill(2)),
        for i in range(4):
            for j in range(4):
                print '%s'%hex(round_key[j][i])[2:].zfill(2),
    ############## Ronda 10 ##############
    round_key = round_k(w[40:44])
    print '\nround[10].start\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(state[j][i])[2:].zfill(2),
    state = SubBytes(state)
    print '\nround[10].s_box\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(state[j][i])[2:].zfill(2),
    state = ShiftRows(state)
    print '\nround[10].s_row\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(state[j][i])[2:].zfill(2),
    state = AddRoundKey(state,round_key)
    print '\nround[10].k_sch\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(round_key[j][i])[2:].zfill(2),
    print '\nround[10].outpt\t',
    for i in range(4):
        for j in range(4):
            print '%s'%hex(state[j][i])[2:].zfill(2),
    return state

def MixColumns(state):
    t=[]
    state_aux = [[0 for x in range(4)] for x in range(Nb)]
    for i in range(4):
        for j in range(4):
            for k in range(4):
                #print 'i= %d  j=%d  k=%d'%(i,j,k)
                l0 = int(hex(state[k][j])[2:].zfill(2)[0],16)
                l1 = int(hex(state[k][j])[2:].zfill(2)[1],16)
                e0 = int(hex(mix[i][k])[2:].zfill(2)[0],16)
                e1 = int(hex(mix[i][k])[2:].zfill(2)[1],16)
                #print '%x%x--> %x'%(e0,e1,lbox[e0][e1])
                #print '%x%x--> %x'%(l0,l1,lbox[l0][l1])
                tmp = (lbox[l0][l1] + lbox[e0][e1])%255
                #print 'suma %x' %(tmp)
                tmp = ebox[int(hex(tmp)[2:].zfill(2)[0],16)][int(hex(tmp)[2:].zfill(2)[1],16)]
                #print 'ebox %x'%tmp
                t.append(tmp)
            #print '%x ^ %x ^  %x ^  %x' %(t[0],t[1],t[2],t[3])
            state_aux[i][j] = t[0]^t[1]^t[2]^t[3]
            #print 'xor final %x\n'%(state_aux[i][j])
            t=[]
        #print '\n'

    return state_aux

def ShiftRows(state):
    state[1] = state[1][1:] + state[1][:1]
    state[2] = state[2][2:] + state[2][:2]
    state[3] = state[3][3:] + state[3][:3]
    return state 

def SubBytes(state):
    for i in range(4):
        for j in range(4):
            p0 = int(hex(state[i][j])[2:].zfill(2)[0],16)
            p1 = int(hex(state[i][j])[2:].zfill(2)[1],16)
            state[i][j] = sbox[p0][p1]
    return state

def AddRoundKey(state, round_k):
    for i in range(4):
        for j in range(4):
            state[i][j] = state[i][j]^round_k[i][j]
    return state

def round_k(w):
    round_key = [[0 for x in range(4)] for x in range(Nb)]
    tmp = hex(w[0])[2:].zfill(8)+hex(w[1])[2:].zfill(8)+hex(w[2])[2:].zfill(8)+hex(w[3])[2:].zfill(8)
    w2 = map(''.join, zip(*[iter(tmp)]*2))
    for r in range(4):
        for c in range(Nb):
            round_key[r][c]=int(w2[r+(4*c)],16)
    return round_key

def KeyBlockRound(keylenght):
    if keylenght == 128:
        return 4,10
    elif keylenght == 192:
        return 6,12
    elif keylenght == 256:
        return 8,14
    else:
        print 'Error: Longitud de llave incorrecta'
        exit(0)

def rotate(tmp,n):
    tmp=hex(tmp)[2:].zfill(8)
    return int('0x'+tmp[n:]+tmp[:n],16)

def RotWord(temp):
    global res
    temp= rotate(temp,2)
    res['v3']=hex(temp)[2:].zfill(8)
    return temp

def SubWord(temp):
    global res
    temp = hex(temp)[2:].zfill(8)
    t1 = hex(sbox[int(temp[0],16)][int(temp[1],16)])[2:].zfill(2)
    t2 = hex(sbox[int(temp[2],16)][int(temp[3],16)])[2:].zfill(2)
    t3 = hex(sbox[int(temp[4],16)][int(temp[5],16)])[2:].zfill(2)
    t4 = hex(sbox[int(temp[6],16)][int(temp[7],16)])[2:].zfill(2)
    res['v4']=t1+t2+t3+t4
    return int(t1+t2+t3+t4,16)


def KeyExpansion(key,wc,Nk,Nr):
    print '\n'
    print '#'.center(50,'#')
    print ' Planificacion de llave '.center(50,'#')
    print '#'.center(50,'#')
    print '\n'
    global res
    w = [0 for x in range(wc)]
    temp=0
    i=0
    while(i < Nk):
        w[i] = key[4*i]<<24 | key[4*i+1]<<16 | key[4*i+2]<<8 | key[4*i+3]
        if(0):
            print '\t%s'%hex(key[4*i]<<24)
            print '\t  %s'%hex(key[4*i+1]<<16)
            print '\t    %s'%hex(key[4*i+2]<<8)
            print '\t      %s'%hex(key[4*i+3])
            print '================================='
            print ' w[%d] = %s\n\n'%(i,hex(w[i]))
        i += 1
    i=Nk
    print '  i     temp       After      After      Rcon[i/Nk]    After XOR   w[i-Nk]   w[i]= temp'
    print '(dec)             RotWord    SubWord                   with rcon             xor w[i-Nk]'
    while(i < Nb*(Nr+1)):
        res['v1']=str(i).zfill(2)
        temp = w[i-1]
        res['v2']=hex(temp)[2:].zfill(8)
        if i%Nk == 0:
            temp = SubWord(RotWord(temp)) ^ rcon[i/Nk]
            res['v5']=hex(rcon[i/Nk])[2:].zfill(8)
            res['v6']=hex(temp)[2:].zfill(8)
        elif (Nk>6) and (i%Nk == 4):
            temp = SubWord(temp)
        res['v7']=hex(w[i-Nk])[2:].zfill(8)
        w[i] = w[i-Nk] ^ temp
        res['v8']=hex(w[i])[2:].zfill(8)
        i += 1
        print '  %s    %s  %s   %s     %s     %s    %s   %s  '%(res['v1'],res['v2'],res['v3'],res['v4'],res['v5'],res['v6'],res['v7'],res['v8'])
        res = res.fromkeys(res,'        ')
    return w

main()

